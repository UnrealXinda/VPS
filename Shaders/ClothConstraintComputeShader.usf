#include "/Engine/Private/Common.ush"

struct FClothParticle
{
    int    bFree;
    float3 OldLoc;
    float3 NewLoc;
};

void SolveDistanceConstraint(inout FClothParticle ParticleA, inout FClothParticle ParticleB, float DesiredDistance)
{
    float3 Delta = ParticleB.NewLoc - ParticleA.NewLoc;

    float CurrentDistance = length(Delta);
    float ErrorFactor = (CurrentDistance - DesiredDistance) / CurrentDistance;

    if (ParticleA.bFree && ParticleB.bFree)
    {
        ParticleA.NewLoc += ErrorFactor * 0.5 * Delta;
        ParticleB.NewLoc -= ErrorFactor * 0.5 * Delta;
    }
    else if (ParticleA.bFree)
    {
        ParticleA.NewLoc += ErrorFactor * Delta;
    }
    else if (ParticleB.bFree)
    {
        ParticleB.NewLoc -= ErrorFactor * Delta;
    }
}

RWStructuredBuffer<FClothParticle> OutputParticleBuffer;
RWStructuredBuffer<float3> OutputPositionBuffer;

[numthreads(32, 32, 1)]
void ComputeClothVerlet(uint3 ThreadId : SV_DispatchThreadID)
{
    const int SizeX = ClothVerletUniform.SizeX;
    const int SizeY = ClothVerletUniform.SizeY;
    const int BufferSize = SizeX * SizeY;
    const float SubStepSqr = ClothVerletUniform.SubStepSqr;
    const float3 Gravity = ClothVerletUniform.Gravity;
    
    int Index = ThreadId.y * SizeX + ThreadId.x;
    
    if (Index < BufferSize)
    {
        if (OutputParticleBuffer[Index].bFree)
        {
            const float3 OldLoc = OutputParticleBuffer[Index].OldLoc;
            const float3 NewLoc = OutputParticleBuffer[Index].NewLoc;
            
            float3 DeltaLoc = NewLoc - OldLoc;
            float3 UpdatedLoc = NewLoc + DeltaLoc + (SubStepSqr * Gravity);

            OutputParticleBuffer[Index].OldLoc = NewLoc;
            OutputParticleBuffer[Index].NewLoc = UpdatedLoc;
        }
    }
}

[numthreads(64, 1, 1)]
void SolveClothConstraint(uint3 ThreadId : SV_DispatchThreadID)
{
    const int SizeX = ClothConstraintUniform.SizeX;
    const int SizeY = ClothConstraintUniform.SizeY;
    const int BufferSize = SizeX * SizeY;
    const int Direction = ClothConstraintUniform.Direction;
    const float DesiredDistance = ClothConstraintUniform.DesiredDistance;
    
    int IndexA, IndexB;
    
    // Solve horizontal constraint
    [branch]
    if (Direction == 0)
    {
        [loop]
        for (int Index = 0; Index < SizeX - 1; ++Index)
        {
            IndexA = (ThreadId.x * SizeX) + Index;
            IndexB = IndexA + 1;
        
            if (IndexA < BufferSize && IndexB < BufferSize)
            {
                SolveDistanceConstraint(OutputParticleBuffer[IndexA], OutputParticleBuffer[IndexB], DesiredDistance);
                OutputPositionBuffer[IndexA] = OutputParticleBuffer[IndexA].NewLoc;
                OutputPositionBuffer[IndexB] = OutputParticleBuffer[IndexB].NewLoc;
            }
        }
    }
    
    // Solve vertical constraint
    else
    {
        [loop]
        for (int Index = 0; Index < SizeY - 1; ++Index)
        {
            IndexA = (Index * SizeX) + ThreadId.x;
            IndexB = IndexA + SizeX;
        
            if (IndexA < BufferSize && IndexB < BufferSize)
            {
                SolveDistanceConstraint(OutputParticleBuffer[IndexA], OutputParticleBuffer[IndexB], DesiredDistance);
                OutputPositionBuffer[IndexA] = OutputParticleBuffer[IndexA].NewLoc;
                OutputPositionBuffer[IndexB] = OutputParticleBuffer[IndexB].NewLoc;
            }
        }
    }
}